{"version":3,"sources":["redux/dialogs-reducer.js","components/Navbar/Navbar.module.css","components/Users/Users.module.css","components/Profile/MyPosts/MyPosts.module.css","api/api.js","reportWebVitals.js","components/Navbar/Navbar.js","components/News/News.js","components/Music/Music.js","components/Settings/Settings.js","utils/object-helpers.js","redux/users-reduser.js","common/Paginator/Paginator.js","assets/images/user.jpg","components/Users/User.js","components/Users/Users.js","redux/users-selectors.js","components/Users/UsersContainer.js","components/Header/Header.js","redux/auth-reducer.js","components/Header/HeaderContainer.js","components/Login/Login.js","redux/app-reducer.js","redux/redux-store.js","hoc/withSuspense.js","App.js","index.js","common/FormsControls/FormsConrols.js","assets/images/preloader.svg","common/Preloader/Proloader.js","common/FormsControls/FormsControls.module.css","utils/validators/validators.js","components/Header/Header.module.css","common/Paginator/Paginator.module.css","redux/profile-reducer.js"],"names":["ADD_MESSAGE","initialState","dialogs","id","name","messages","message","addMessageActionCreator","newMessageBody","type","dialogsReducer","state","action","text","module","exports","instance","axios","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","className","classes","nav","item","to","activeClassName","activeLink","News","Music","props","Settings","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","fake","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","count","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","onClick","p","cn","selectedPage","pageNumber","е","User","user","src","photos","small","userPhoto","disabled","some","Users","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","React","Component","compose","connect","bind","page","totalCount","Header","header","loginBlock","isAuth","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","required","Input","s","formSummaryError","length","stopSubmit","_error","formData","INITIALIZED_SUCCESS","initialized","appReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","_store_","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","AppConteiner","withRouter","promise","Promise","all","SamuraiJSApp","ReactDOM","document","getElementById","FormControl","input","meta","touched","children","hasError","formControl","Textarea","restProps","child","placeholder","validators","component","validate","Preloader","preloader","value","maxLengthCreator","maxLength","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","posts","likesCount","profile","addPostActionCreator","newPostText","setStatus","getUserProfile","newPost","postId"],"mappings":"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","file":"static/js/main.1bdfbf14.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ADD_MESSAGE = 'ADD-MESSAGE';\r\n// const UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT';\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Andrey'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Hi'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yep'}\r\n    ]\r\n    // newMessageText: '222'\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n// будет брать текст не из state, а из action\r\n            let text = action.newMessageBody;\r\n            return  {\r\n                ...state,\r\n                // newMessageText: '',\r\n// создаём новый массив.\r\n// ...state.messages - закидывает элементы из старого messages\r\n// {id: 6,message: text} - дописываем ещё один элемент\r\n                messages: [...state.messages, {id: 6,message: text}]\r\n            }\r\n        // case UPDATE_NEW_MESSAGE_TEXT:\r\n// создаём объект. Разворачиваем старый объект, заполняем старыми значениями,\r\n// создаём новое (перезатираем конкретное свойство newMessageText)\r\n//             return {\r\n//                 ...state,\r\n//                 newMessageText: action.newText\r\n//             }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// newMessageBody -сообщение упадёт в action\r\nexport const addMessageActionCreator = (newMessageBody) => {\r\n    return {\r\n        type: ADD_MESSAGE, newMessageBody\r\n    }\r\n}\r\n\r\n// action для обновления нажатия на клавиши\r\n// export const updateNewMessageText = (text) => {\r\n//     return {\r\n//         type: UPDATE_NEW_MESSAGE_TEXT, newText: text\r\n//     }\r\n// }\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__asJWH\",\"item\":\"Navbar_item__1NPLZ\",\"activeLink\":\"Navbar_activeLink__3U4sA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__3cAY6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1tX-J\",\"posts\":\"MyPosts_posts__1TOLX\"};","import React from \"react\";\r\nimport * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    // базовый URL будет автоматически приклеиваться к строке\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\"API-KEY\": \"716f1b8b-bc85-4d85-b00e-40338217278b\"}\r\n});\r\n\r\n\r\n// функция получит данные от того, кто будет её вызывать\r\n// axios возвращает promise\r\n// return promise, который возвращается не методом .get, а в then из response\r\n// берём data и её возвращаем. Ретурнем то, что вернул then, а он возвращает другой promise\r\n\r\n// export const getUsers = (currentPage = 1, pageSize = 10) => {\r\n//     return instance.get(`users?page=${currentPage}&\r\n//             count=${pageSize}`).then(response => response.data);\r\n\r\n\r\n// вспомогательный объект для групировки методов\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => {\r\n            return response.data;\r\n        });\r\n\r\n    },\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId) {\r\n        console.warn('Please use profileAPI')\r\n        // если обратиться к методу getProfile, то мы перенаправим на profileAPI передав туда userId\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get(`profile/${userId}`);\r\n        // необходимо сделать return, потому что .get возвращает promise, мы на этот promise\r\n        // подписываемся .then и этот .then после подписки возвращает другой promise\r\n    },\r\n    getStatus(userId) {\r\n        // делаем get запрос за статусом\r\n        return instance.get(`profile/status/${userId}`);\r\n    },\r\n    updateStatus(status) {\r\n        // вторым параметром отправлчем объект у котого есть свойство status\r\n        return instance.put(`profile/status`, {status: status});\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    // возвращает promise, используется в auth-reducer\r\n    me() {\r\n        return instance.get('auth/me');\r\n    },\r\n    // для put и для post есть возможжность в запрос полодить объект\r\n    login(email, password, rememberMe = false) {\r\n// вторым параметром отправляем данные { email, password, rememberMe }\r\n        return instance.post(`auth/login`, { email, password, rememberMe });\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to='/profile' activeClassName={classes.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/dialogs' activeClassName={classes.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/news' activeClassName={classes.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/users' activeClassName={classes.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/music' activeClassName={classes.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/settings' activeClassName={classes.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport classes from './News.module.css'\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport './Music.module.css';\r\n\r\nconst Music = (props) => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport './Settings.module.css';\r\n\r\nconst Settings = (props) => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n// универсальная функция, которая вернёт новый массив в котором заменит совпадения по\r\n// такому проперти name из объекта с таким itemId\r\n    return items.map(u => {\r\n        // натация через квадратные скобки\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import React from \"react\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE-IS-FOLLOWING-PROGRESS';\r\n\r\nlet initialState = {\r\n    users: [],\r\n    // количество пользователей на странице\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    // текущая страница\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    // в массив будем помещать id пользователя, которого follow\r\n    followingInProgress: [],\r\n    fake: 10\r\n\r\n};\r\n\r\n// reducer - это функция, через которую идёт модификация state\r\n\r\n// UI может меняться от изменёного state. пользователь жмёт кнопку, мы dispatch action в state,\r\n// reducer этот action обрабатывает, state меняется и идёт перерисовка UI.\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n// Меняем один из элементов массива.\r\n// .map возвращает новый массив на основе старого массива. Пробегаем по массиву users\r\n\r\n// проходим по id, возвращаем его, если не поменялся, если его нужно поменять, то меняем false на true\r\n            return {\r\n// вынесем чать логики в object-helpers\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n//                 users: state.users.map(u => {\r\n// // если userID пробегаемого с помощью .map равен userID, которого нужно зафоловить (он сидит в action),\r\n// // то мы должны скопировать пользователя, поменять followed на true и вернуть его копию\r\n//                     if (u.id === action.userId) {\r\n//                         return {...u, followed: true}\r\n//                     }\r\n//                     return u;\r\n//                 })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n//                 users: state.users.map(u => {\r\n// // если userID пробегаемого с помощью .map равен userID, которого нужно зафоловить (он сидит в action),\r\n// // то мы должны скопировать пользователя, поменять followed на true и вернуть его копию\r\n//                     if (u.id === action.userId) {\r\n//                         return {...u, followed: false}\r\n//                     }\r\n//                     return u;\r\n//                 })\r\n            }\r\n// старый state перезатираем users, которые пришли через action\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            // меняем currentPage на тот currentPage, который сидит в action\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        // делаем копию state и подменяем те свойства, которые нужно заменить users, currentPage, totalUsersCount\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n// делаем копию массива и, если в action приходит false, то мы говорим,\r\n// что загрузка завершилась, нам нужно из массива удалить id\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\n// action creator - чистая функция, которая возвращает action\r\n\r\nexport const followSuccess = (userId) => ({type: FOLLOW, userId})\r\n\r\nexport const unfollowSuccess = (userId) => {\r\n    return {type: UNFOLLOW, userId}\r\n}\r\n// юзеров получаем из вне и можем засетать\r\nexport const setUsers = (users) => {\r\n    return {type: SET_USERS, users}\r\n}\r\n// можем изменить текущую страничку\r\nexport const setCurrentPage = (currentPage) => {\r\n    return {type: SET_CURRENT_PAGE, currentPage}\r\n}\r\n// установить общее значение пользователей\r\nexport const setTotalUsersCount = (totalUsersCount) => {\r\n    return {type: SET_TOTAL_USERS_COUNT, count: totalUsersCount}\r\n}\r\n// action - это объект у которого есть как минимум свойство type, а так же свойства, которые нужны reduserу для обработки actiona\r\n// reducer из actiona достаёт isFetching (action.isFetching), мы должны это свойство сформировать. Формируем isFetching\r\nexport const toggleIsFetching = (isFetching) => {\r\n    return {type: TOGGLE_IS_FETCHING, isFetching}\r\n}\r\nexport const toggleFollowingProgress = (isFetching, userId) => {\r\n    return {type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId}\r\n}\r\n\r\n// создадим thunk - это функция которая внутри себя диспатчет обычные action\r\n// принимает функцию dispatch\r\n// создадим requestUsers ThunkCreator - функкция, которая может что-то принимать и возвращает Thunk\r\n// вызов ThunkCreator создаст Thunk. Сможет достучаться до currentPage и pageSize, которые кто-то передаст в ThunkCreator\r\nexport const requestUsers = (page, pageSize) => {\r\n// делаем thunk асинхронной\r\n// thunk - внутренняя функция\r\n    return async (dispatch) => {\r\n        // перед запросом на сервер добавляем вызов toggleIsFetching\r\n        dispatch(toggleIsFetching(true));\r\n        // запрашиваем и dispatch setCurrentPage для подсветки выбранной страницы\r\n        dispatch(setCurrentPage(page));\r\n    // getUsers находится в api.js\r\n    // .then - когда пользователи будут получины, можно обработать данные\r\n    // вместо .then(response) => .then(data)\r\n    let data = await usersAPI.getUsers(page, pageSize);\r\n        // .then(data => {\r\n        // когда приходит ответ от сервера toggleIsFetching = false\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        // из компоненты UI отправляем в state, для этого нужен call back. call back передают через props\r\n        // call back, который меняет что-то в state к нам приходит через mapDispatchToProps\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    // });\r\n}\r\n}\r\n\r\n// зарефакторим follow и unfollow. Создадим общую функцию\r\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\n// export const follow = (userId) => {\r\n//     return async (dispatch) => {\r\n//         dispatch(toggleFollowingProgress(true, userId));\r\n//         // axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {},\r\n//         //     {\r\n//         //         withCredentials: true,\r\n//         //         headers: {\"API-KEY\": \"716f1b8b-bc85-4d85-b00e-40338217278b\"}\r\n//         //     })\r\n//         let response = await usersAPI.follow(userId);\r\n//             // .then(response => {\r\n//                 if (response.data.resultCode == 0) {\r\n//                     dispatch(followSuccess(userId));\r\n//                 }\r\n// // по окончанию асинхронного запроса мы диспатчем false\r\n//                 dispatch(toggleFollowingProgress(false, userId));\r\n//\r\n//             // });\r\n//     }\r\n// }\r\n//\r\n// export const unfollow = (userId) => {\r\n//     return async (dispatch) => {\r\n//         dispatch(toggleFollowingProgress(true, userId));\r\n//         // axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {},\r\n//         //     {\r\n//         //         withCredentials: true,\r\n//         //         headers: {\"API-KEY\": \"716f1b8b-bc85-4d85-b00e-40338217278b\"}\r\n//         //     })\r\n//         let response = await usersAPI.unfollow(userId);\r\n//             // .then(response => {\r\n//                 if (response.data.resultCode == 0) {\r\n//                     dispatch(unfollowSuccess(userId));\r\n//                 }\r\n// // по окончанию асинхронного запроса мы диспатчем false\r\n//                 dispatch(toggleFollowingProgress(false, userId));\r\n//             // });\r\n//     }\r\n// }\r\n\r\n\r\nexport default usersReducer;","import React, {useState} from \"react\";\r\nimport classes from './Paginator.module.css';\r\nimport cn from 'classnames';\r\n\r\nconst Paginator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n\r\n    // pagesCount - количество всех страниц\r\n    // totalUsersCount - сколько всего пользователей\r\n    // pageSize размер страницы\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    // создадим массив со страницыми, которые нужно отобразить\r\n    let pages = [];\r\n    // пробегаем по pagesCount.\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        // масив pages заполним .push значениями i\r\n        pages.push(i);\r\n    }\r\n// отпределение границ\r\n// количество всех страниц pagesCount разделили на размер порции portionSize. portionSize задаём в props\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n// используем huk useState\r\n// со старта будем хранить первую порцию portionNumber. setPortionNumber - функция, которая portionNumber меняет\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n// определяем правую и левую границу\r\n    let leftPortionPageNumber = (portionNumber -1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n// по pages можем пробежаться .map. внутри map приходит страничка\r\n// если currentPage равна текущей странице p, то добавляется класс selectedPage\r\n// рисуем страницы pages\r\n    return <div className={classes.paginator}>\r\n{/*добавляем дополнительные условия для отображения кнопки. Показывай кнопку влево, если portionNumber > 1*/}\r\n        { portionNumber > 1 &&\r\n            // внутри кнопки вешаем onClick и говорим установи setPortionNumber порция текущая - 1 (portionNumber - 1)\r\n        <button onClick={ () => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n        {pages\r\n// перед отрисовкой страниц и .map сделаем фильтрацию с помощью .filter.\r\n// Отрисуем только те страницы, фильтрация которых вернёт true\r\n// нужно отрисовать >= левой границы порции (leftPortionPageNumber)\r\n// <= правой границы порции rightPortionPageNumber\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n            return <span className={ cn ({\r\n                [classes.selectedPage]: currentPage === p\r\n            }, classes.pageNumber) }\r\n                         key={p}\r\n\r\n\r\n                // хотим засетать CurrentPage. Итерируемся по p и она будет текущей страничкой\r\n                // при нажатии на кнопку нужно поменять CurrentPage\r\n                // обработчик событий аномимная функция. Кнопка вызовет функцию и передаст е\r\n                // мы внутри обработчика вызовем наш метод this.onPageChanged(p) и передадим p\r\n                // наш метод не вызовется, пока не вызовется анонимная функция. Анонимная функция вызовется при клике на span\r\n\r\n                         onClick={(е) => {\r\n                             onPageChanged(p);\r\n                         }}>{p}</span>\r\n        })}\r\n\r\n            { portionCount > portionNumber &&\r\n                // если стрелка показывается, то при клике на стрелку мы устанавливаем номер порции portionNumber на единицу больше\r\n        <button onClick={ () => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","export default __webpack_public_path__ + \"static/media/user.8eff3731.jpg\";","import React from \"react\";\r\nimport classes from './Users.module.css';\r\nimport userPhoto from '../../assets/images/user.jpg';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paginator from \"../../common/Paginator/Paginator\";\r\n\r\nlet User = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                                 className={classes.userPhoto}></img>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {/*При нажатии на кнопку вызывается анонимная функция. При нажатии на кнопку мы из props вызываем call back follow unfollow*/}\r\n                        {/*Когда по кнопке кликнут, отработает call back функция и передай id*/}\r\n                        {/* если в props будет fallowinInProgress будет true, то кнопка будет disabled */}\r\n                        {user.followed ?\r\n                            <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                // Во время onClick мы вызываем что-то что приходит из props\r\n                                unfollow(user.id);\r\n// перед асинхронным запросом мы диспатчем true\r\n\r\n//                                 props.toggleFollowingProgress(true, user.id);\r\n                                // axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${user.id}`,\r\n                                //     {\r\n                                //         withCredentials: true,\r\n                                //         headers: {\"API-KEY\": \"716f1b8b-bc85-4d85-b00e-40338217278b\"}\r\n                                //     })\r\n                                // вместо axios обращаемся к usersAPI\r\n                                // usersAPI.unfollow(user.id)\r\n                                //\r\n                                //         .then(response => {\r\n                                //         // если resultCode = 0, значит сервер подтвердил, что подписка произошла\r\n                                //         if (response.data.resultCode == 0) {\r\n                                //             // если подписка произошла, то мы в этом случае должны задиспатчить в reducer, вызвать call back\r\n                                //             props.unfollow(user.id);\r\n                                //         }\r\n                                //         props.toggleFollowingProgress(false, user.id);\r\n                                //     });\r\n\r\n                            }}>Unfollow</button>\r\n                            // когда по кнопке кликнут вызове анонимную стрелочную функцию () => { props.follow(user.id) }\r\n                            // внутри стрелочной функции обращение к props, из props берётся unfollow и передаётся id\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                follow(user.id);\r\n//                                 props.toggleFollowingProgress(true, user.id);\r\n//                                 // axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${user.id}`, {},\r\n//                                 //     {\r\n//                                 //         withCredentials: true,\r\n//                                 //         headers: {\"API-KEY\": \"716f1b8b-bc85-4d85-b00e-40338217278b\"}\r\n//                                 //     })\r\n//                                 usersAPI.follow(user.id)\r\n//                                     .then(response => {\r\n//                                     if (response.data.resultCode == 0) {\r\n//                                         props.follow(user.id);\r\n//                                     }\r\n// // по окончанию асинхронного запроса мы диспатчем false\r\n//                                     props.toggleFollowingProgress(false, user.id);\r\n//\r\n//                                 });\r\n                            }}>Follow</button>}\r\n                        {/*follow unfollow - это action creator. Находятся в UserContainer, где connect создал  call back функцию\r\n                            в которой он вызывает fallow action creator потом action creator возвращает action и потом action диспатчется*/}\r\n                </div>\r\n                </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'user.location.country'}</div>\r\n                        <div>{'user.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n        </div>)\r\n}\r\n\r\n// [\r\n//     {id: 1, photoUrl: 'https://icon-library.com/images/samurai-icon/samurai-icon-8.jpg',\r\n//         followed: false, fullName: 'Yauheni', status: 'Hello', location: {city: 'Minsk', country: 'Belarus'}},\r\n//     {id: 2, photoUrl: 'https://icon-library.com/images/samurai-icon/samurai-icon-8.jpg',\r\n//         followed: true, fullName: 'Yauheni', status: 'Hello', location: {city: 'Minsk', country: 'Belarus'}},\r\n//     {id: 3, photoUrl: 'https://icon-library.com/images/samurai-icon/samurai-icon-8.jpg',\r\n//         followed: false, fullName: 'Yauheni', status: 'Hello', location: {city: 'Minsk', country: 'Belarus'}},\r\n// ]\r\n\r\nexport default User;\r\n\r\n\r\n// <div>\r\n//     {/*При нажатии на кнопку вызывается анонимная функция. При нажатии на кнопку мы из props вызываем call back follow unfollow*/}\r\n//     {/*Когда по кнопке кликнут, отработает call back функция и передай id*/}\r\n//     {u.followed ? <button onClick={() => {\r\n//             getUnFollow(u).then(data => {\r\n//\r\n//                 // если resultCode = 0, значит сервер подтвердил, что подписка произошла\r\n//                 if (data.resultCode == 0) {\r\n//                     // если подписка произошла, то мы в этом случае должны задиспатчить в reducer, вызвать call back\r\n//                     props.unfollow(u.id);\r\n//                 }\r\n//             });\r\n//         }}>Unfollow</button>\r\n//         // когда по кнопке кликнут вызове анонимную стрелочную функцию () => { props.follow(u.id) }\r\n//         // внутри стрелочной функции обращение к props, из props берётся unfollow и передаётся id\r\n//         : <button onClick={() => {\r\n//             getFollow(u).then(data => {\r\n//                 if (data.resultCode == 0) {\r\n//                     props.follow(u.id);\r\n//                 }\r\n//             });\r\n//         }}>Follow</button>}\r\n//     {/*follow unfollow - это action creator. Находятся в UserContainer, где connect создал  call back функцию\r\n//                             в которой он вызывает fallow action creator потом action creator возвращает action и потом action диспатчется*/}\r\n// </div>","import React from \"react\";\r\nimport Paginator from \"../../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\n// страничка User отрисовывает Paginator и каждого юзера\r\nlet Users = ({currentPage, totalUsersCount, onPageChanged, pageSize, users, ...props}) => {\r\n    return <div>\r\n        <Paginator totalItemsCount={totalUsersCount} currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   pageSize={pageSize} />\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     key={u.id}\r\n                                     followingInProgress={props.followingInProgress}\r\n                                     unfollow={props.unfollow}\r\n                                     follow={props.follow}\r\n                />\r\n//                                  <div >\r\n//                 <span>\r\n//                     <div>\r\n//                         <NavLink to={'/profile/' + u.id}>\r\n//                             <img src={u.photos.small != null ? u.photos.small : userPhoto}\r\n//                                  className={classes.userPhoto}></img>\r\n//                         </NavLink>\r\n//                     </div>\r\n//                     <div>\r\n//                         {/*При нажатии на кнопку вызывается анонимная функция. При нажатии на кнопку мы из props вызываем call back follow unfollow*/}\r\n//                         {/*Когда по кнопке кликнут, отработает call back функция и передай id*/}\r\n// {/* если в props будет fallowinInProgress будет true, то кнопка будет disabled */}\r\n//                         {u.followed ? <button disabled={followingInProgress.some(id => id === u.id)} onClick={() => {\r\n//                             // Во время onClick мы вызываем что-то что приходит из props\r\n//                             unfollow(u.id);\r\n// // перед асинхронным запросом мы диспатчем true\r\n//\r\n// //                                 props.toggleFollowingProgress(true, u.id);\r\n//                                 // axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,\r\n//                                 //     {\r\n//                                 //         withCredentials: true,\r\n//                                 //         headers: {\"API-KEY\": \"716f1b8b-bc85-4d85-b00e-40338217278b\"}\r\n//                                 //     })\r\n//                                 // вместо axios обращаемся к usersAPI\r\n//                             // usersAPI.unfollow(u.id)\r\n//                             //\r\n//                             //         .then(response => {\r\n//                             //         // если resultCode = 0, значит сервер подтвердил, что подписка произошла\r\n//                             //         if (response.data.resultCode == 0) {\r\n//                             //             // если подписка произошла, то мы в этом случае должны задиспатчить в reducer, вызвать call back\r\n//                             //             props.unfollow(u.id);\r\n//                             //         }\r\n//                             //         props.toggleFollowingProgress(false, u.id);\r\n//                             //     });\r\n//\r\n//                             }}>Unfollow</button>\r\n//                             // когда по кнопке кликнут вызове анонимную стрелочную функцию () => { props.follow(u.id) }\r\n//                             // внутри стрелочной функции обращение к props, из props берётся unfollow и передаётся id\r\n//                             : <button disabled={followingInProgress.some(id => id === u.id)} onClick={() => {\r\n//                                 follow(u.id);\r\n// //                                 props.toggleFollowingProgress(true, u.id);\r\n// //                                 // axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {},\r\n// //                                 //     {\r\n// //                                 //         withCredentials: true,\r\n// //                                 //         headers: {\"API-KEY\": \"716f1b8b-bc85-4d85-b00e-40338217278b\"}\r\n// //                                 //     })\r\n// //                                 usersAPI.follow(u.id)\r\n// //                                     .then(response => {\r\n// //                                     if (response.data.resultCode == 0) {\r\n// //                                         props.follow(u.id);\r\n// //                                     }\r\n// // // по окончанию асинхронного запроса мы диспатчем false\r\n// //                                     props.toggleFollowingProgress(false, u.id);\r\n// //\r\n// //                                 });\r\n//                             }}>Follow</button>}\r\n//                         {/*follow unfollow - это action creator. Находятся в UserContainer, где connect создал  call back функцию\r\n//                             в которой он вызывает fallow action creator потом action creator возвращает action и потом action диспатчется*/}\r\n//                 </div>\r\n//                 </span>\r\n//                 <span>\r\n//                     <span>\r\n//                         <div>{u.name}</div>\r\n//                         <div>{u.status}</div>\r\n//                     </span>\r\n//                     <span>\r\n//                         <div>{'u.location.country'}</div>\r\n//                         <div>{'u.location.city'}</div>\r\n//                     </span>\r\n//                 </span>\r\n//             </div>)\r\n                )\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\n// [\r\n//     {id: 1, photoUrl: 'https://icon-library.com/images/samurai-icon/samurai-icon-8.jpg',\r\n//         followed: false, fullName: 'Yauheni', status: 'Hello', location: {city: 'Minsk', country: 'Belarus'}},\r\n//     {id: 2, photoUrl: 'https://icon-library.com/images/samurai-icon/samurai-icon-8.jpg',\r\n//         followed: true, fullName: 'Yauheni', status: 'Hello', location: {city: 'Minsk', country: 'Belarus'}},\r\n//     {id: 3, photoUrl: 'https://icon-library.com/images/samurai-icon/samurai-icon-8.jpg',\r\n//         followed: false, fullName: 'Yauheni', status: 'Hello', location: {city: 'Minsk', country: 'Belarus'}},\r\n// ]\r\n\r\nexport default Users;\r\n\r\n\r\n// <div>\r\n//     {/*При нажатии на кнопку вызывается анонимная функция. При нажатии на кнопку мы из props вызываем call back follow unfollow*/}\r\n//     {/*Когда по кнопке кликнут, отработает call back функция и передай id*/}\r\n//     {u.followed ? <button onClick={() => {\r\n//             getUnFollow(u).then(data => {\r\n//\r\n//                 // если resultCode = 0, значит сервер подтвердил, что подписка произошла\r\n//                 if (data.resultCode == 0) {\r\n//                     // если подписка произошла, то мы в этом случае должны задиспатчить в reducer, вызвать call back\r\n//                     props.unfollow(u.id);\r\n//                 }\r\n//             });\r\n//         }}>Unfollow</button>\r\n//         // когда по кнопке кликнут вызове анонимную стрелочную функцию () => { props.follow(u.id) }\r\n//         // внутри стрелочной функции обращение к props, из props берётся unfollow и передаётся id\r\n//         : <button onClick={() => {\r\n//             getFollow(u).then(data => {\r\n//                 if (data.resultCode == 0) {\r\n//                     props.follow(u.id);\r\n//                 }\r\n//             });\r\n//         }}>Follow</button>}\r\n//     {/*follow unfollow - это action creator. Находятся в UserContainer, где connect создал  call back функцию\r\n//                             в которой он вызывает fallow action creator потом action creator возвращает action и потом action диспатчется*/}\r\n// </div>","import React from \"react\";\r\nimport {createSelector} from \"reselect\";\r\n\r\n// селектор - это функция, которая принимает весь state целиком и возвращает часть state\r\n\r\nconst getUsersSelector = (state) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\n// создадим селектор с помощью библиотеки reselect, специальной функции createSelector\r\n// createSelector специальная функция,к оторая возвращает селектор, внутрь селектора передаём функцию,\r\n// которая будет выбирать что-то из state\r\n// первым параметром передаём тот селектор, который будет использоваться для получения значений\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\nexport const countSomethingDifficult = (state) => {\r\n    debugger;\r\n    let count = 23;\r\n    return count;\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, setCurrentPage, unfollow, toggleFollowingProgress,\r\n    requestUsers\r\n} from \"../../redux/users-reduser\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../../common/Preloader/Proloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\nclass UsersContainer extends React.Component {\r\n// компонента вмонтируется на страницу один раз\r\n    componentDidMount() {\r\n        // this.props.getUsersThunkCreator\r\n        let {currentPage, pageSize} = this.props;\r\n        this.props.getUsers(currentPage, pageSize);\r\n        // перед запросом на сервер добавляем вызов toggleIsFetching\r\n        // this.props.toggleIsFetching(true);\r\n        // // getUsers находится в api.js\r\n        // // .then - когда пользователи будут получины, можно обработать данные\r\n        // // вместо .then(response) => .then(data)\r\n        // usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n        //         // когда приходит ответ от сервера toggleIsFetching = false\r\n        //         this.props.toggleIsFetching(false);\r\n        //         this.props.setUsers(data.items);\r\n        //         // из компоненты UI отправляем в state, для этого нужен call back. call back передают через props\r\n        //         // call back, который меняет что-то в state к нам приходит через mapDispatchToProps\r\n        //         this.props.setTotalUsersCount(data.totalCount);\r\n        //     });\r\n    }\r\n\r\n// меняем страничку\r\n    onPageChanged = (pageNumber) => {\r\n        let {pageSize} = this.props;\r\n        this.props.getUsers(pageNumber, pageSize);\r\n        // this.props.setCurrentPage(pageNumber);\r\n        // // В props на момент клика будет старое значение, по этому номер страницы возмям из pageNumber\r\n        // // показываем крутилку, получаем данные, сетаем users, выключаем крутилку\r\n        // this.props.toggleIsFetching(true);\r\n        // usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n        //         this.props.toggleIsFetching(false);\r\n        //         this.props.setUsers(data.items);\r\n        //     });\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   // toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                   followingInProgress={this.props.followingInProgress}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n// функция, которая принимает весь state приложения и возвращает объект только с теми данными,\r\n// которые нам из state нужны\r\n\r\n// с помощью mapStateToProps придёт в функциональную компоненту в props, будет сидеть свойство users\r\n// значением которой будут пользователи из state\r\n\r\n// через mapStateToProps контейнерная компонента внедряет users, через props в компоненту Users\r\n// let mapStateToProps = (state) => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         // прокинем pageSize, totalUsersCount, currentPage в компоненту\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    // console.log('mapStateToProps')\r\n    return {\r\n        // users: getUsersSuperSelector(state),\r\n        users: getUsers(state),\r\n        // прокинем pageSize, totalUsersCount, currentPage в компоненту\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n// функция служит для передачи дочерней, презентационной компоненте, через props, call back\r\n// Хоти получить call back, который диспатчет что-то из state, то мы делаем это в mapDispatchToProps\r\n// call back, которые диспатчат что-то в state\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         // функция, которая будет диспатчить результат работы action creator (action)\r\n//         follow: (userID) => {\r\n//             dispatch(followAC(userID));\r\n//         },\r\n//         unfollow: (userID) => {\r\n//             dispatch(unfollowAC(userID));\r\n//         },\r\n//         setUsers: (users) => {\r\n//             dispatch(setUsersAC(users));\r\n//         },\r\n//         setTotalUsersCount: (totalCount) => {\r\n//             dispatch(setUsersTotalCountAC(totalCount));\r\n//         },\r\n// // диспатчем результат вызова action creator. Вызов action creator всегда возвращает action\r\n//         setCurrentPage: (pageNumber) => {\r\n//             dispatch(setCurrentPageAC(pageNumber));\r\n//         },\r\n//         // mapDispatchToProps принимает AC. Создаём call back, которые попадёт в props\r\n//         // Принимает isFatching. Если компонента вызовет, то задача задиспатчить action. И isFetching пробрасываем\r\n//         toggleIsFetching: (isFetching) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching));\r\n//             // диспатчем результат вызова AC (AC возвращает action)\r\n//         }\r\n//     }\r\n// }\r\n\r\n// добавим Redirect\r\n\r\n// let withRedirect = withAuthRedirect(UsersContainer);\r\n// можем не создавать withRedirect и connect обернуть withAuthRedirect\r\n// внутреним hoc получаем одни контейнер, внешним hoc получаем ещё одни контейнер\r\n\r\n// компонета получит props с помощью connect.\r\n// map StateToProps возвращает объект, который из state достаёт значения, данные\r\n// mapDispatchToProps функция возвращающая объект в котором есть call back\r\n// каждый call back диспатчет что-то в store и заново срабатывает функция mapStateToProps\r\n// т.к. store изменился connect вызывает mapStateToProps, что бы достать свежие props из stora\r\n// connect из actionCreator создаст call back, который внутри задиспатчет то что вернёт actionCreator\r\n// export default withAuthRedirect (connect(mapStateToProps,\r\n//     {\r\n//         follow, unfollow, setCurrentPage,\r\n//         toggleFollowingProgress, getUsers\r\n//     })(UsersContainer));\r\n// getUsersThunkCreator попадает в props в компаненту\r\n\r\n// перепишем последовательный вызов через compose\r\nexport default compose(\r\n    // защита страницы пользователей\r\n    // withAuthRedirect,\r\n    connect(mapStateToProps,{follow, unfollow, setCurrentPage, toggleFollowingProgress, getUsers: requestUsers})\r\n)(UsersContainer)","import React from 'react';\r\nimport classes from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className={classes.header}>\r\n        <img src='https://i.pinimg.com/originals/7f/e1/92/7fe192806e4f48dad849363337ea0f66.png'></img>\r\n            <div className={classes.loginBlock}>\r\n                {/*если авторизованы, то мы покажем login и кнопку log out, в противном случае ссылку на авторизацию\r\n                вызовем onClick и в onClick вызовем что-то, что пришло из props\r\n                logout компоненту снабдит контейнерная компонента*/}\r\n                { props.isAuth ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div> : <NavLink to={'/login'}>Login</NavLink> }\r\n            </div>\r\n        </header>\r\n)\r\n}\r\n\r\nexport default Header;","import {authAPI, usersAPI} from \"../api/api\";\r\nimport {setUserProfile} from \"./profile-reducer\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'SET-USER-DATA';\r\n// SET_USER_DATA установить пользовательские данные.\r\n\r\n// auth-reducer - его задача процессить текущего пользователя\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    // залогинены или нет\r\n    isAuth: false,\r\n    // идёт загрузка или не идёт\r\n    // isFetching: false\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n// с сервера приходят данные. Берём старый state и перезатираем данные\r\n                ...state,\r\n// данные приходят в action. Данные нужные reducer для преобразования state лежат в action\r\n// В action создадим объект \"data\" мы его деструктуризируем.\r\n// В объекте \"data\" положим userId, email, login\r\n// В action будет свойство data в нём будет сидеть userId, email, ligin\r\n// data меняем на payload\r\n                ...action.payload,\r\n// склеиваем ...state и ...action.data. Свойства, которые находятся в ...action.data перезатирают свойства в .state\r\n                // если пришли пользовательские данные, то мы меняем на true\r\n                // isAuth: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// приходит data. Может приходить и в разобраном виде\r\n// setUserData - это action creator - задача функции вернуть action\r\n// Упаковываем action, который будет задиспатчен в reducer (диспатчем action )\r\nexport const setAuthUserData = (userId, email, login, isAuth) => {\r\n    return {\r\n        // data меняем на payload\r\n        type: SET_USER_DATA, payload: {userId, email, login, isAuth}\r\n        // в обхект data нужно упаковать свойства\r\n    }\r\n}\r\n\r\n// функция внешняя, которая возвращает внутренюю функцию\r\n// если из thunk мы возвращает что-то, то в том месте, где мы вызвали thunk в app-reducer\r\n// если thunk что-то return, то этот return становится return самого dispatch\r\n// async функция возвращает promise, функция зарезолвится, когда всё выполнится\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n// promise можем дождаться не с помощью .then, а с помощью await\r\n// .me возвращает promise функция должна быть async. response - значение, которым promise зарезолвился\r\n    let response = await authAPI.me()\r\n// .me и .then возврощает promise, если допишем return, то promise нам вернётся наружу\r\n// promise идёт в app-reducer\r\n//         .then(response => {\r\n// проверка response.data.resultCode === 0 - если 0, то мы залогинены\r\n// и в этом случае мы должны задиспатчик авторизационные данные, которые возмём из response.data.data.login\r\n// в response сидит data, стандартная axios структура\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data;\r\n// если мы залогинелись правильно resultCode === 0, то мы данные, которые вернул сервер id, email, login\r\n// задиспатчем с помощью setAuthUserData и true добавим\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n// авторизационные данные придут в reducer\r\n    }\r\n    // });\r\n    // return \"yo\";\r\n}\r\n\r\n// thunk это функция принимает метод dispatch\r\n// thunk creator это функция возвращающая dispatch и может принимать что-то и это что-то доступно\r\n// thunk в результате замыкания\r\n\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n    // .then(response => {\r\n    // если залогится будет resultCode === 0\r\n    if (response.data.resultCode === 0) {\r\n        // после логинизации мы заново должны запросить authAPI.me()\r\n        // должны заново задиспатчить thunk. Вызываем thunk creator он возвращает thunk\r\n        // thunk уходит через dispatch в store\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        // stopSubmit - это специальный action creator из redux-form\r\n        // мы stopSubmit собмитим, говоря, что хотим прекратить собмит формы и дальше dispatch action\r\n        // в AC нужно передать сабмит какой формы мы стопаем. Вторым параметром передаём объект\r\n        // с проблемными свойствами для каждого fild\r\n        // форма получит одну ошибку на всю форму\r\n        // let action = stopSubmit(\"login\", {_error: \"Common error\"});\r\n        // возмём ошибку из ответа\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n    // });\r\n}\r\n\r\n// thunk creator для logout\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n    // .then(response => {\r\n// мы вылогинелись, кука удалилась, resultCode === 0. Должны зачистить своё состояние\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n    // });\r\n}\r\n\r\nexport default authReducer;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n// компонента вмотрирована\r\n// переносим в App.js\r\n//     componentDidMount() {\r\n//делаем ajax запрос\r\n// передаём вторым параметром объект для настройки запроса. { withCredentials: true }\r\n        // .me вернёт результат отработки метода .get\r\n        // this.props.getAuthUserData();\r\n        // authAPI.me()\r\n//            .then(response => {\r\n// // проверка response.data.resultCode === 0 - если 0, то мы залогинены\r\n// // и в этом случае мы должны задиспатчик авторизационные данные, которые возмём из response.data.data.login\r\n// // в response сидит data, стандартная axios структура\r\n//            if (response.data.resultCode === 0) {\r\n//                let {id, login, email} = response.data.data;\r\n//                this.props.setAuthUserData(id, email, login);\r\n// // авторизационные данные придут в reducer\r\n//            }\r\n//        });\r\n//     }\r\n\r\n    render() {\r\n// пробрасываем все props\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\n// обернём HeaderContainer ещё одной контейнерной компонентой которую нам возвращает connect\r\n// функция принимающая state и возвращающая объект\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n    // данные попадут в <Header/>\r\n});\r\n// setAuthUserData находится в auth-reducer\r\n// добавляем logout - это thunk creator для вылогиневания\r\n// когда logout попадёт в контейнерную компоненту connect создаст обёртку над thunk creator\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);\r\n// setAuthUserData - объект, которые содержит action creator, который содержится в auth-reducer\r\n","import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport {createField, Input} from \"../../common/FormsControls/FormsConrols\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from \"./../../common/FormsControls/FormsControls.module.css\";\r\n\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    // console.log('rerender')\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(\"Email\", \"email\", [required], Input)}\r\n            {createField(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}</div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// название формы, которую мы обернули hoc\r\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm)\r\n\r\n// в formData придут все значение из формы\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        // onSubmit приходит вся форма\r\n        // залогинелись и должны отправить на сервер данные\r\n        // создадим thunk в auth-reducer и её задача будет логинеться\r\n        // из props вызываем login. login приходит из connect\r\n        // здесь login будет call back, который внутри себя dispatch вызов thunk creator\r\n        // call back принимает параметры email, password, rememberMe и потом диспатчет\r\n        // вызов thunk creator и в thunk creator передаются те же параметры, что и в call back\r\n        // из props вызываем login, login к нам приходит благодаря connect\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n// если в props придёт isAuth, значат залогинены и идём /profile\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n// если не залогинены идём сюда\r\n    return <div>\r\n        <h1>Login</h1>\r\n        {/*reduxForm собрали данные и собмитим*/}\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\n// в mapDispatchToProps можем закинуть ссылки thunk creators\r\n// connect создаст call back обёртки и мы получим call back отдельно, который dispatch вызов\r\n// thunk creator\r\n// login - здесь thunk creator\r\n// mapStateToProps это функция, которая принимает state и возвращает из state то что нам нужно\r\nconst mapStateToPropsAuth = (state) => ({\r\n// нам нужен isAuth, который лежит в state в redux-store в combineReducers\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToPropsAuth, {login})(Login);","import React from \"react\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED-SUCCESS\";\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                // если сюда придёт action, мы делаем копию state и меняем initialized на true\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// задиспатчим action creation\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS});\r\n\r\n// thunk crator, в нём thunk. В thunk мы делаем что-то, что нужно для инициализации\r\nexport const initializeApp = () => (dispatch) => {\r\n    // задиспатчем получение авторизационных данных и когда данные будут получены задиспатчем initializedSuccess\r\n    // мы проинициализировались, только после завершения асинхронных диспатчей\r\n    // promise приходит из auth-reducer и мф можем дождаться, когда он зарезолвится\r\n    // если thunk что-то return, то этот return становится return самого dispatch\r\n    // вызываем thunk creator getAuthUserData(), возвращается thunk\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            // когда промис зарезолвится делаем initializedSuccess\r\n            dispatch(initializedSuccess());\r\n        });\r\n}\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reduser\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\n\r\n// reducer - это чистая функция, которая принимает старый state, action, если нужно, можифицирует старый state,\r\n// возвращает модифицоронный, или старый, если не нужно было его менять.\r\n// добавляем formReducer.\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\n// для работы придлжения Redux DevTools добавляем перед созданием stora\r\n// composeEnhancers добавит ещё applyMiddleware для перехвата dispatch\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// applyMiddleware - принять промежуточные слои\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow._store_ = store;\r\n\r\nexport default store;","import React, {Suspense} from \"react\";\r\nimport Preloader from \"../common/Preloader/Proloader\";\r\n\r\n// hok - это функция, которая принимает компонент и возвращает компонент\r\n\r\nexport const withSuspense = (Component) => {\r\n\r\n    return (props) => {\r\n        return <Suspense fallback={<Preloader />}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n    };\r\n}\r\n\r\nexport default withSuspense;","import React, {Suspense} from \"react\";\r\nimport './App.css';\r\nimport './components/Header/Header.module.css';\r\nimport './components/Navbar/Navbar.module.css';\r\nimport './components/Profile/Profile.module.css';\r\nimport './components/Profile/MyPosts/MyPosts.module.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\n\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./common/Preloader/Proloader\";\r\nimport store from \"./redux/redux-store\";\r\nimport withSuspense from \"./hoc/withSuspense\";\r\n\r\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\n// загрузка компоненты DialogsContainer с помощью React.lazy\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\nclass App extends React.Component {\r\n    // делаем запрос в App, когда всё App отрендарилась и хочет замонтироваться мы делаем запрос\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n        // будем возвращать всю разметку только если мы проинициализировались в противном случае proloader\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    {/* Route - это компонента, которая следит за URL в браузере и если URL совпадает,*/}\r\n                    {/* то она делает render. В нашем случае возвращает jsx разметку, возвращает компоненту.*/}\r\n                    {/*Добавляем имя параметра profile/:userId. Переменная в ProfileContainer*/}\r\n                    {/*знак ? говорит об опциональности параметра*/}\r\n                    <Route path='/profile/:userId?' render={withSuspense(ProfileContainer)}/>\r\n                    <Route path='/dialogs' render={withSuspense(DialogsContainer)}/>\r\n                    <Route path='/users' render={() => <UsersContainer />}/>\r\n                    <Route path='/news' render={() => <News />}/>\r\n                    <Route path='/music' render={() => <Music />}/>\r\n                    <Route path='/settings' render={() => <Settings />}/>\r\n                    <Route path='/login' render={() => <LoginPage />}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// что бы в state был app, нужно закомбайнить appReducer\r\n\r\nconst mapStateToProps = (state) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nlet AppConteiner = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\nconst SamuraiJSApp = (props) => {\r\n    return <BrowserRouter>\r\n        <Provider store = {store}>\r\n            <AppConteiner />\r\n        </Provider>\r\n    </BrowserRouter>\r\n}\r\n\r\n// когда connect компоненту сбивается роутинг. Нужно обернуть connect withRouter\r\n// export default withRouter(connect(null, {getAuthUserData})(App));\r\n// для того, чтобы убрать вложеность hoc в hoc используем метод compose\r\n// диспастчем санку initializeApp\r\n// export default compose(\r\n//     withRouter,\r\n//     connect(mapStateToProps, {initializeApp}))(App);\r\n\r\nexport default SamuraiJSApp;","import reportWebVitals from './reportWebVitals';\r\nimport ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport SamuraiJSApp from \"./App\";\r\n\r\n// setInterval(() => {\r\n//     store.dispatch({type: \"FAKE\"})\r\n// }, 1000);\r\n\r\n    ReactDOM.render(<SamuraiJSApp />,document.getElementById('root'));\r\n\r\nreportWebVitals();\r\n","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\n// из props достаём input и meta и деструктуризируем оставшиеся props\r\n// для этого используем рест оператор. props содержать всё, кроме input и meta\r\nexport const FormControl = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        // если ошибка есть покажи hasError, иначе приплюсуй пустую строку\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            {/*Все props,к оторые пришли в нас необходимо отдать textarea*/}\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {/*в meta сидит свойство error\r\n            Проверка на то, что был ли этот элемент тронут и meta error тогда верни span\r\n            текст ошибки, окторый вернул один из валидаторов сидит в meta.error*/}\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\n// функция, которая будет возврощать Field в коспоненту login\r\n// если props может не быть, по умолчанию пустой объект\r\n// если текста не будет, то пустая строка, если текст есть отобразим рядом с Field\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n\r\n        <div>\r\n            <Field name={name} placeholder={placeholder}\r\n                   component={component} validate={validators} {...props} /> {text}\r\n        </div>\r\n\r\n)\r\n","export default __webpack_public_path__ + \"static/media/preloader.2cfb1e57.svg\";","import React from \"react\";\r\nimport preloader from \"../../assets/images/preloader.svg\";\r\n\r\nlet Preloader = () => {\r\n    return (\r\n        <img src={ preloader } />\r\n    )\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3Yz3d\",\"error\":\"FormsControls_error__2JpA0\",\"formSummaryError\":\"FormsControls_formSummaryError__2r9V5\"};","import React from \"react\";\r\n\r\nexport const required = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\n// функция, которая возвращает другую функцию\r\n// функция возврощает другую функцию и эта внутреняя функция получает доступ\r\n// к переменным данным, которые находятся в функции родительской\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__TkXPJ\",\"loginBlock\":\"Header_loginBlock__3XcG8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2pXXY\",\"pageNumber\":\"Paginator_pageNumber__mtoBe\",\"selectedPage\":\"Paginator_selectedPage__zelZI\"};","import {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\n// const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\nconst SET_STATUS = 'SET-STATUS';\r\nconst DELETE_POST = 'DELETE-POST';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you', likesCount: 12},\r\n        {id: 2, message: 'It\"s my firs post', likesCount: 11},\r\n        {id: 3, message: 'Hi', likesCount: 11},\r\n        {id: 4, message: 'Hello', likesCount: 11}\r\n    ],\r\n    // newPostText: '111',\r\n    profile: null,\r\n    status: \"\"\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                newPostText: '',\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        }\r\n        // let newPost = {\r\n        //     id: 5,\r\n        //     message: state.newPostText,\r\n        //     likesCount: 0\r\n        // };\r\n        // let stateCopy = {...state};\r\n        // stateCopy.posts = [...state.posts];\r\n        // stateCopy.posts.push(newPost);\r\n        // stateCopy.newPostText = '';\r\n        // return stateCopy;\r\n\r\n        // case UPDATE_NEW_POST_TEXT: {\r\n        //     return {\r\n        //         ...state,\r\n        //         newPostText: action.newText\r\n        //     }\r\n        //     // let stateCopy = {...state};\r\n        //     // stateCopy.newPostText = action.newText;\r\n        //     // return stateCopy\r\n        // }\r\n        // когда статус придёт с сервера, мы его засетаем\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        // если тип actiona SET_USER_PROFILE, то мы вернём копию ...state в котором поменяем profile на\r\n        // profile который сидит в actione\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n// возвращается копия state в которой мы возмём старые посты и отфильтруем по id\r\n// только те id, которые не равны action postId\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// в action creator передаём newPostText, засовываем его в объект action\r\nexport const addPostActionCreator = (newPostText) => {\r\n    return {\r\n        type: ADD_POST, newPostText\r\n    }\r\n}\r\n\r\n// создаём AC(функция возвращающая объект, action(объект в котором инкапсулированы данные, для того что бы\r\n// reducer получил этот action и применил изменения на state ) ) в который приходит profile.\r\n// SET_USER_PROFILE - названия действия (actiona). Хотим засетать юзерский профайл, reducer возмёт из экшина\r\nexport const setUserProfile = (profile) => {\r\n    return {\r\n        type: SET_USER_PROFILE, profile\r\n    }\r\n}\r\n\r\n// создадим AC\r\nexport const setStatus = (status) => {\r\n    return {\r\n        type: SET_STATUS, status\r\n    }\r\n}\r\n\r\nexport const deletePost = (postId) => {\r\n    return {\r\n        type: DELETE_POST, postId\r\n    }\r\n}\r\n// заменим .then на await\r\nexport const getUserProfile = (userId) => async (dispatch) => {\r\n    let response = await usersAPI.getProfile(userId);\r\n    // axios.get(`https://social-network.samuraijs.com/api/1.0/profile/${userId}`)\r\n    // с servera приходит объект response в нём нужно свойство data\r\n    // .then(response => {\r\n    // весь объекст сэтаем в reduces\r\n    dispatch(setUserProfile(response.data));\r\n    // в props этот объект где-то должен появится, с помощье mapDispatchToProps\r\n    // });\r\n}\r\n\r\n// создадим thunk\r\nexport const getStatus = (userId) => async (dispatch) => {\r\n// в response будет сидеть результат, которым зарезолвится promise\r\n    let response = await profileAPI.getStatus(userId)\r\n    // .then(response => {\r\n    dispatch(setStatus(response.data))\r\n    // });\r\n}\r\n\r\nexport const updateStatus = (status) => async (dispatch) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n    // .then(response => {\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n    }\r\n    // });\r\n}\r\n\r\n// export const deletePost = (postId) => async (dispatch) => {\r\n//     let response = await profileAPI.delete(postId)\r\n//             if (response.data.resultCode === 0) {\r\n//                 dispatch(setStatus(status));\r\n//                 }\r\n//\r\n// }\r\n\r\n// export const updateNewPostTextActionCreator = (text) => {\r\n//     return {\r\n//         type: UPDATE_NEW_POST_TEXT, newText: text\r\n//     }\r\n// }\r\n\r\nexport default profileReducer;"],"sourceRoot":""}