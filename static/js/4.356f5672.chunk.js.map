{"version":3,"sources":["components/Dialogs/DialogItem/DialogItem.js","components/Dialogs/Message/Message.js","components/Dialogs/AddMessageForm/AddMessageForm.js","components/Dialogs/Dialogs.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.js"],"names":["DialogItem","props","className","classes","dialog","active","to","id","activeClassName","activeLink","name","Message","messages","message","maxLength20","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","state","dialogsPage","dialogElements","dialogs","map","messagesElements","isAuth","dialogsItems","values","addMessage","newMessageBody","module","exports","mapStateToPropsForRedirect","auth","withAuthRedirect","Component","RedirectComponent","this","React","connect","compose","dispatch","addMessageActionCreator"],"mappings":"oKAYeA,EARI,SAACC,GAChB,OACI,qBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,OAA/C,SACI,cAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,GAAIC,gBAAiBL,IAAQM,WAA9D,SAA2ER,EAAMS,U,kBCE9EC,EANC,SAACV,GACb,OACI,qBAAKC,UAAWC,IAAQS,SAAxB,SAAmCX,EAAMY,W,yCCA3CC,EAAcC,YAAiB,IAkBtBC,cAAU,CAACC,KAAM,wBAAjBD,EAbQ,SAACf,GACpB,OACI,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAM,iBAAkBa,YAAY,qBAAqBC,SAAU,CAACC,IAAUX,OAE9G,8BACI,kDC4DDY,IAnEC,SAACzB,GAEb,IAAI0B,EAAQ1B,EAAM2B,YAEdC,EAAiBF,EAAMG,QAAQC,KAAI,SAAA3B,GAAM,OAAI,cAAC,EAAD,CAAYM,KAAMN,EAAOM,KAAsBH,GAAIH,EAAOG,IAAtBH,EAAOG,OAExFyB,EAAmBL,EAAMf,SAASmB,KAAI,SAAAlB,GAAO,OAAI,cAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQN,OAsBrG,OAAoB,GAAhBN,EAAMgC,OAAwB,cAAC,IAAD,CAAU3B,GAAI,WAE3CL,EAAMgC,OAGP,sBAAK/B,UAAWC,IAAQ2B,QAAxB,UACI,qBAAK5B,UAAWC,IAAQ+B,aAAxB,SACKL,IAEL,qBAAK3B,UAAWC,IAAQS,SAAxB,SACKoB,IAGL,cAAC,EAAD,CAAgBd,SAtBJ,SAACiB,GAMjBlC,EAAMmC,WAAWD,EAAOE,sBAKF,cAAC,IAAD,CAAU/B,GAAI,a,oBCvC5CgC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,gC,oBCApED,EAAOC,QAAU,CAAC,WAAa,iC,oBCA/BD,EAAOC,QAAU,CAAC,SAAW,4B,8JCMzBC,EAA6B,SAACb,GAAD,MAAY,CAGzCM,OAAQN,EAAMc,KAAKR,SAMVS,EAAmB,SAACC,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAKC,KAAK5C,MAAMgC,OAET,cAACU,EAAD,eAAeE,KAAK5C,QAFI,cAAC,IAAD,CAAUK,GAAG,eAHT,GACXwC,IAAMH,WAatC,OAFqCI,YAAQP,EAARO,CAAoCH,K,iCC5B7E,0DAgDeI,sBACXD,aAtCkB,SAACpB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAQF,SAACqB,GACtB,MAAO,CASHb,WAAY,SAACC,GACTY,EAASC,YAAwBb,SAkBzCK,IAFWM,CAGbtB","file":"static/js/4.356f5672.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './DialogItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id} activeClassName={classes.activeLink}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from './Message.module.css'\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={classes.messages}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsConrols\";\r\nimport React from \"react\";\r\n\r\nconst maxLength20 = maxLengthCreator(20)\r\n\r\n// onSubmit - что должно выполниться, если форма засобмитится - специальный метод handleSubmit\r\n// handleSubmit появляется из reduxForm\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newMessageBody\"} placeholder=\"Enter your message\" validate={[required, maxLength20]} />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);","import React from 'react';\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {Textarea} from \"../../common/FormsControls/FormsConrols\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogElements = state.dialogs.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>);\r\n\r\n    let messagesElements = state.messages.map(message => <Message message={message.message} key={message.id}/>);\r\n\r\n    // let addMessage = () => {\r\n    //     props.addMessage();\r\n    // }\r\n\r\n    // обработчик события на нажатие на каждый символ\r\n    // let onMessageChange = (e) => {\r\n    //     let text = e.target.value;\r\n    //     // call back пришёл из DialogsContainer\r\n    //     props.updateNewMessageText(text);\r\n    // }\r\n// свойство такое же как name у Field\r\n    let addNewMessage = (values) => {\r\n        // alert(values.newMessageBody);\r\n        // в обработчике вызовем addMessage() и передадим текстовое сообщение values.newMessageBody;\r\n        // addMessage приходит в props в Dialogs из контейнерной компоненты благодоря mapDispatchToProps\r\n        // props.addMessage(values.newMessageBody);\r\n    // alert(values.newMessageBody)\r\n        props.addMessage(values.newMessageBody);\r\n    }\r\n\r\n    if (props.isAuth == false) return <Redirect to={\"/login\"}/>;\r\n    // другая запись с !, если не залогинен - редирект\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messagesElements}\r\n{/* onSubmit - когда форма засобмитится вызови addNewMessage */}\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\n// const maxLength20 = maxLengthCreator(20)\r\n\r\n// onSubmit - что должно выполниться, если форма засобмитится - специальный метод handleSubmit\r\n// handleSubmit появляется из reduxForm\r\n\r\n// вынесли в AddMessageForm\r\n// const AddMessageForm = (props) => {\r\n//     return (\r\n//         <form onSubmit={props.handleSubmit}>\r\n//             <div>\r\n//                 <Field component={Textarea} name={\"newMessageBody\"} placeholder=\"Enter your message\" validate={[required, maxLength20]} />\r\n//             </div>\r\n//             <div>\r\n//                 <button>Send</button>\r\n//             </div>\r\n//         </form>\r\n//     )\r\n// }\r\n//\r\n// const AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\nexport default Dialogs;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__4yY8G\",\"dialogsItems\":\"Dialogs_dialogsItems__1QHa5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeLink\":\"DialogItem_activeLink__1xxUg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__1V6Du\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport Dialogs from \"../components/Dialogs/Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n// вынесем isAuth из mapStateToProps\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    // profile: state.profilePage.profile,\r\n    // информация залогинены или нет\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n// создадим отдельный класс обертку для каждой целевой компоненты\r\n// withAuthRedirect конектик к store и забирает isAuth\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to=\"/login\"/>\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    // законектим RedirectComponent\r\n\r\n\r\n// добавим ещё один connect. Конектим RedirectComponent, компонету, созданную внутри hoc к store\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    // когда вызываем hoc withAuthRedirect возвращается две контейнерные компоненты одна в одной\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n","import React from 'react';\r\nimport {addMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n// замапить state на props. Превратить часть state в props\r\n// настраивает данные, которые мы возмём из state\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n        // достать из state информацию залогинены мы или нет\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\n// настраивает call back, которые мы будем отправлять в презентационнуб компоненту\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // updateNewMessageText отправляем в контейнер Dialogs\r\n        // updateNewMessageText: (text) => {\r\n            // диспатчим action, который пришёл из action creator\r\n            // dispatch(updateNewMessageText(text));\r\n            // },\r\n// запускаем ActionCreator, он возвращает action (объект у которого есть как min type)\r\n// и dispatch то, что вернул ActionCreator (диспатчим action)\r\n// newMessageBody - сформированное текстовое сообщение\r\n        addMessage: (newMessageBody) => {\r\n            dispatch(addMessageActionCreator(newMessageBody));\r\n        }\r\n    }\r\n};\r\n\r\n// isAuth произойдёт в withAuthRedirect\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n// connect создаёт контейнерную компоненту, внутри контейнерной компоненты она рендерит презентационную компоненту и\r\n// внутрь презентационной компоненты в качестве props передаёт те свойства, которые седят в 2-х объектах\r\n\r\n// в первую функцию connect засунит state во вторую засунит distatch\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\n// выполним последовательный вызов Dialogs, withAuthRedirect, connect\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}